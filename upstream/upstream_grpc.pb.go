// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package upstream

import (
	context "context"
	"fmt"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// UpstreamPeerServiceClient is the client API for UpstreamPeerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UpstreamPeerServiceClient interface {
	BidirectionalStreaming(ctx context.Context, opts ...grpc.CallOption) (UpstreamPeerService_BidirectionalStreamingClient, error)
	Ready(ctx context.Context, in *ReadyRequest, opts ...grpc.CallOption) (*ReadyResult, error)
	Live(ctx context.Context, opts ...grpc.CallOption) (UpstreamPeerService_LiveClient, error)
}

type upstreamPeerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUpstreamPeerServiceClient(cc grpc.ClientConnInterface) UpstreamPeerServiceClient {
	return &upstreamPeerServiceClient{cc}
}

func (c *upstreamPeerServiceClient) BidirectionalStreaming(ctx context.Context, opts ...grpc.CallOption) (UpstreamPeerService_BidirectionalStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &_UpstreamPeerService_serviceDesc.Streams[0], "/upstream.grpc.service.UpstreamPeerService/bidirectionalStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &upstreamPeerServiceBidirectionalStreamingClient{stream}
	return x, nil
}

type UpstreamPeerService_BidirectionalStreamingClient interface {
	Send(*InputStreamRequest) error
	Recv() (*OutputStreamRequest, error)
	grpc.ClientStream
}

type upstreamPeerServiceBidirectionalStreamingClient struct {
	grpc.ClientStream
}

func (x *upstreamPeerServiceBidirectionalStreamingClient) Send(m *InputStreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *upstreamPeerServiceBidirectionalStreamingClient) Recv() (*OutputStreamRequest, error) {
	m := new(OutputStreamRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *upstreamPeerServiceClient) Ready(ctx context.Context, in *ReadyRequest, opts ...grpc.CallOption) (*ReadyResult, error) {
	out := new(ReadyResult)
	err := c.cc.Invoke(ctx, "/upstream.grpc.service.UpstreamPeerService/ready", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upstreamPeerServiceClient) Live(ctx context.Context, opts ...grpc.CallOption) (UpstreamPeerService_LiveClient, error) {
	stream, err := c.cc.NewStream(ctx, &_UpstreamPeerService_serviceDesc.Streams[1], "/upstream.grpc.service.UpstreamPeerService/live", opts...)
	if err != nil {
		return nil, err
	}
	x := &upstreamPeerServiceLiveClient{stream}
	return x, nil
}

type UpstreamPeerService_LiveClient interface {
	Send(*LiveRequest) error
	Recv() (*LiveResult, error)
	grpc.ClientStream
}

type upstreamPeerServiceLiveClient struct {
	grpc.ClientStream
}

func (x *upstreamPeerServiceLiveClient) Send(m *LiveRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *upstreamPeerServiceLiveClient) Recv() (*LiveResult, error) {
	m := new(LiveResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UpstreamPeerServiceServer is the server API for UpstreamPeerService service.
// All implementations must embed UnimplementedUpstreamPeerServiceServer
// for forward compatibility
type UpstreamPeerServiceServer interface {
	BidirectionalStreaming(UpstreamPeerService_BidirectionalStreamingServer) error
	Ready(context.Context, *ReadyRequest) (*ReadyResult, error)
	Live(UpstreamPeerService_LiveServer) error
	mustEmbedUnimplementedUpstreamPeerServiceServer()
}

// UnimplementedUpstreamPeerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUpstreamPeerServiceServer struct {
}

func (UnimplementedUpstreamPeerServiceServer) BidirectionalStreaming(UpstreamPeerService_BidirectionalStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method BidirectionalStreaming not implemented")
}
func (UnimplementedUpstreamPeerServiceServer) Ready(context.Context, *ReadyRequest) (*ReadyResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ready not implemented")
}
func (UnimplementedUpstreamPeerServiceServer) Live(UpstreamPeerService_LiveServer) error {
	return status.Errorf(codes.Unimplemented, "method Live not implemented")
}
func (UnimplementedUpstreamPeerServiceServer) mustEmbedUnimplementedUpstreamPeerServiceServer() {}

// UnsafeUpstreamPeerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UpstreamPeerServiceServer will
// result in compilation errors.
type UnsafeUpstreamPeerServiceServer interface {
	mustEmbedUnimplementedUpstreamPeerServiceServer()
}

func RegisterUpstreamPeerServiceServer(s *grpc.Server, srv UpstreamPeerServiceServer) {
	s.RegisterService(&_UpstreamPeerService_serviceDesc, srv)
}

func _UpstreamPeerService_BidirectionalStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UpstreamPeerServiceServer).BidirectionalStreaming(&upstreamPeerServiceBidirectionalStreamingServer{stream})
}

type UpstreamPeerService_BidirectionalStreamingServer interface {
	Send(*OutputStreamRequest) error
	Recv() (*InputStreamRequest, error)
	grpc.ServerStream
}

type upstreamPeerServiceBidirectionalStreamingServer struct {
	grpc.ServerStream
}

func (x *upstreamPeerServiceBidirectionalStreamingServer) Send(m *OutputStreamRequest) error {
	return x.ServerStream.SendMsg(m)
}

func (x *upstreamPeerServiceBidirectionalStreamingServer) Recv() (*InputStreamRequest, error) {
	fmt.Printf("na serieux\n")
	m := new(InputStreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		fmt.Printf("err")
		return nil, err
	}
	return m, nil
}

func _UpstreamPeerService_Ready_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpstreamPeerServiceServer).Ready(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/upstream.grpc.service.UpstreamPeerService/Ready",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpstreamPeerServiceServer).Ready(ctx, req.(*ReadyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpstreamPeerService_Live_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UpstreamPeerServiceServer).Live(&upstreamPeerServiceLiveServer{stream})
}

type UpstreamPeerService_LiveServer interface {
	Send(*LiveResult) error
	Recv() (*LiveRequest, error)
	grpc.ServerStream
}

type upstreamPeerServiceLiveServer struct {
	grpc.ServerStream
}

func (x *upstreamPeerServiceLiveServer) Send(m *LiveResult) error {
	return x.ServerStream.SendMsg(m)
}

func (x *upstreamPeerServiceLiveServer) Recv() (*LiveRequest, error) {
	m := new(LiveRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _UpstreamPeerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "upstream.grpc.service.UpstreamPeerService",
	HandlerType: (*UpstreamPeerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ready",
			Handler:    _UpstreamPeerService_Ready_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "bidirectionalStreaming",
			Handler:       _UpstreamPeerService_BidirectionalStreaming_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "live",
			Handler:       _UpstreamPeerService_Live_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "misc/upstream.proto",
}
